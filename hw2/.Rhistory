probs = dnorm(skills, mu, s, log = T)
return(sum(probs))
}
estimate_denom <- function(N, Xs, ys){
## estimate integral (P(data | skills) P(skills))
## sample N iid samples from prior and compute mean
k = ncol(Xs)
Skills = mvrnorm(N, mu = replicate(k,0), Sigma =diag(replicate(k,4)))
lls = apply(Skills, MARGIN = 1, eval_ll, Xs, ys)
return(mean(exp(lls)))
}
posterior <- function(Z, skills, Xs, ys){
return(exp(eval_prior_log(skills) + eval_ll(skills,Xs,ys))/Z)
}
## helper function
# compute_ll_one <- function(skills,x,y){
#   # skills,x vector length 6
#   ## y 1, -1 result
#   skill_sum = sum(x*skills)*y
#   return(1/(1+exp(skill_sum)))
# }
eval_ll <- function(skills,Xs, ys){
k = ncol(Xs) ## number of players
skill_sum = rowSums(Xs %*% diag(skills))
skill_sum = skill_sum*ys
return(sum(log(1/(1+exp(skill_sum)))))
}
eval_prior_log <- function(skills, mu = 0, s= 4){
probs = dnorm(skills, mu, s, log = T)
return(sum(probs))
}
estimate_denom <- function(N, Xs, ys){
## estimate integral (P(data | skills) P(skills))
## sample N iid samples from prior and compute mean
k = ncol(Xs)
Skills = mvrnorm(N, mu = replicate(k,0), Sigma =diag(replicate(k,4)))
lls = apply(Skills, MARGIN = 1, eval_ll, Xs, ys)
return(mean(exp(lls)))
}
## this returns probability of the posterior
posterior <- function(skills,Z, Xs, ys){
return(exp(eval_prior_log(skills) + eval_ll(skills,Xs,ys))/Z)
}
## read data
Xs = read.csv("teams.txt", header = F, sep = " ")
Xs = as.matrix(Xs)
ys = read.csv("outcomes.txt", header = F)
ys = as.vector(ys$V1)
N = 1000
Z = estimate_denom(N,Xs,ys)
## compute posterior mean
N2 = 10000
k = ncol(Xs)
Skills <- mvrnorm(N2, mu = replicate(k,0), Sigma =diag(replicate(k,4)))
ps = apply(Skills, MARGIN = 1, posterior,Z, Xs, ys)
ps
length(ps)
dim(Skills)
mean(Skills[,1]*ps)
mean(Skills[,2]*ps)
mean(Skills[,3]*ps)
mean(Skills[,4]*ps)
## read data
Xs = read.csv("teams.txt", header = F, sep = " ")
Xs = as.matrix(Xs)
ys = read.csv("outcomes.txt", header = F)
ys = as.vector(ys$V1)
N = 1000
Z = estimate_denom(N,Xs,ys)
## compute posterior mean
N2 = 10000
k = ncol(Xs)
Skills <- mvrnorm(N2, mu = replicate(k,0), Sigma =diag(replicate(k,100)))
ps = apply(Skills, MARGIN = 1, posterior,Z, Xs, ys)
mean(Skills[,4]*ps)
mean(Skills[,3]*ps)
mean(Skills[,2]*ps)
skills <- c(1,4,2,3,5,1)
sum(eval_ll(skills, Xs, ys))
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
install.packages("coda")
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
dim(x)
plot(x[,1])
plot(x[,1])
plot(x[,1])
plot(x[,1])
rm(list = ls())
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
x
?mcmc
mc_output
mc_output[1,]
mc_output[2,]
rm(list = ls())
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
plot(mc_output[,1])
p = plot(mc_output[,1])
print(p)
print(p)
plot(mc_output[,1])
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
plot(mc_output)
plot(mc_output[,1])
plot(mc_output[,2])
plot(mc_output[,3])
plot(mc_output[,5])
plot(mc_output[,6])
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
plot(mc_output[,1])
plot(mc_output[,2])
plot(mc_output[,3])
plot(mc_output[,4])
plot(mc_output[,45)
plot(mc_output[,5)
plot(mc_output[,5]
)
plot(mc_output[,6]
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
iterations=1e+04                             #The number of iterations
source('~/Desktop/stochastic_simulation/hw2/mcmc.R', echo=TRUE)
plot(x)
plot(x)
plot(mc_output[,1])
?raftery.diag
sample(1:6)
sample(1,1:6)
sample(1,1:6)
sample(1,1:6)
sample(1,1:6)
?sample
sample(1:6,1)
sample(1:6,1)
source("mcmc_samplers.R")
source("mcmc_samplers.R")
mc_out = mcmc_rw(iterations = 10000, burn_in = 1000)
source("mcmc_samplers.R")
mc_out = mcmc_rw(iterations = 10000, burn_in = 1000)
mc_vis(mc_out)
#mc_vis(mc_out, bu)
source("mcmc_samplers.R")
#mc_out = mcmc_rw(iterations = 1e+4, burn_in = 5000)
mc_vis(mc_out, burn_in = 5000, thinning = 1)
mc_vis(mc_out, burn_in = burn_in, thinning = 1)
source("mcmc_samplers.R")
burn_in = 5000
iterations = 1e+04
mc_out = mcmc_rw(iterations = iterations, burn_in = burn_in)
mc_vis(mc_out, burn_in = burn_in)
source("mcmc_samplers.R")
burn_in = 5000
iterations = 1e+04
mc_out = mcmc_is(iterations = iterations, burn_in = burn_in)
mc_vis(mc_out, burn_in = burn_in)
burn_in = 5000
iterations = 1e+04
mc_out = mcmc_is(iterations = iterations, burn_in = burn_in)
mc_vis(mc_out, burn_in = burn_in)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_rw(iterations = iterations, burn_in = burn_in)
mc_vis(mc_out, burn_in = burn_in)
?raftery.diag
source("mcmc_samplers.R")
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_rw(iterations = iterations, burn_in = burn_in)
mc_vis(mc_out, burn_in = burn_in)
raftery.diag(mc_out,q = 0.025)
raf = raftery.diag(mc_out,q = 0.025)
raf = raftery.diag(mc_out,q = 0.025)
raf
raf$params
raf$resmatrix
?geweke.diag
geweke.diag(mc_out)
source("mcmc_samplers.R")
burn_in = 5000
iterations = 1e+04
mc_out = mcmc_is(iterations = iterations, burn_in = burn_in)
mc_vis(mc_out, burn_in = burn_in)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_rw(iterations = iterations, burn_in = burn_in)
mc_vis(mc_out, burn_in = burn_in)
raf = raftery.diag(mc_out,q = 0.025)
raf
raf$params
raf$resmatrix
raf$resmatrix["N"]
raf$resmatrix
raf$resmatrix[,"N"]
iterations = 1e+04
burn_in = iterations/2
mc_out0 = mcmc_rw(iterations = iterations, burn_in = burn_in)
mc_vis(mc_out0, burn_in = burn_in)
raf = raftery.diag(mc_out,q = 0.025)
N = max(raf$resmatrix[,"N"]) ## use the largest N suggested by raftery
mc_out = mcmc_rw(iterations = N, burn_in = N/2)
mc_vis(mc_out, burn_in = N/2)
mc_out
dim(mc_out)
saveRDS(mc_out, paste0("mc_p3_iter",N, ".mc"))
getwd()
saveRDS(mc_out, paste0("mc_p3_iter",N, ".mc"))
test = seq(1:10)
cumsum(test)
N
test = apply(mc_out, MARGIN = 1, cumsum)
length(test)
dim(test)
dim(mc_out)
test[1,1:10]
test[2,1:10]
test[3,1:10]
source("mcmc_samplers.R")
mc_SamplePath(mc_out)
rowMeans(mc_out)
colMeans(mc_out)
gew = geweke.diag(mc_out)
gew
gew = geweke.diag(mc_out)
gew
pi
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
pi
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
target(rho_,data = )
target(rho_,data )
rho_
dim(data)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
likelihood
prior
ll(rho,data = )
ll(rho,data )
rho_
rho
exp(-300)
exp(-3000)
ll(rho, data) - ll(rho_, data)
prior(rho,data)
prior(rho)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1e+04
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 100
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
mc_out
plot(mc_out)
class(mc_out)
cumsum(mc_out)
plot(1:length(mc_out), cumsum(mc_out))
plot(1:length(mc_out), cumsum(mc_out)/1:length(mc_out))
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 10000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 1000
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 10000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
iterations = 100
burn_in = iterations/2
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
plot(1:length(mc_out), cumsum(mc_out)/1:length(mc_out))
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 10000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
burn_in = 10
iterations = 100 + burn_in
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
burn_in = 10
iterations = 100 + burn_in
mc_out = mcmc_cor(data, iterations,burn_in, rho = 0.1, thinning= 1, size = 0.1)
mc_out
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
burn_in = 10
iterations = 100 + burn_in
mc_out = mcmc_cor(data, iterations,burn_in = 0 , rho = 0.1, thinning= 1, size = 0.1)
mc_out
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
burn_in = 10000
iterations = 100 + burn_in
mc_out = mcmc_cor(data, iterations,burn_in = 0 , rho = 0.1, thinning= 1, size = 0.1)
rm(list= ls())
source("mcmc_cor.R")
## get data
N = 1000
X = rnorm(N, 0, 1)
Y = rnorm(N, 0, 1)
data = cbind(X,Y)
burn_in = 10000
iterations = 100 + burn_in
start = proc.time()
mc_out = mcmc_cor(data, iterations,burn_in = 0 , rho = 0.1, thinning= 1, size = 0.1)
runtime = proc.time() - start
print(paste0("runtime: ", runtime))
plot(mc_out)
saveRDS(mc_out, paste0("mcmc_p4_iter", iterations, ".mc"))
runtime
install.packages("zoo")
z2 <- zoo(rnorm(6))
rollapply(z2, 3, mean, by = 3)      # means of nonoverlapping groups of 3
aggregate(z2, c(3,3,3,6,6,6), mean) # same
library(zoo)
z2 <- zoo(rnorm(6))
rollapply(z2, 3, mean, by = 3)      # means of nonoverlapping groups of 3
aggregate(z2, c(3,3,3,6,6,6), mean) # same
z2
rollapply(z2, 3, mean, by = 3)      # means of nonoverlapping groups of 3
rollapply(z2, 3, mean, by = 1)
z2
filter(1:100, rep(1/3,3))
test = filter(1:100, rep(1/3,3))
test
names(test)
class(test)
running_var < function(mc_out){
var_running = c()
for(i in 1:length(mc_out)){
var_running <- c(var_running, var(mc_out[1:i]))
}
return(var_running)
}
running_var < function(mc_out){
var_running = c()
for(i in 1:length(mc_out)){
var_running <- c(var_running, var(mc_out[1:i]))
}
return(var_running)
}
running_var <- function(mc_out){
var_running = c()
for(i in 1:length(mc_out)){
var_running <- c(var_running, var(mc_out[1:i]))
}
return(var_running)
}
running_var(mc_out)
var(1)
running_var_mean <- function(mc_out){
var_running = c()
mean_running = c()
for(i in 1:length(mc_out)){
var_running <- c(var_running, var(mc_out[1:i]))
mean_running <- c(var_running, mean(mc_out[1:i]))
}
return(list(var_running = var_running, mean_running = mean_running))
}
running = running_var(mc_out)
running
running_var_mean <- function(mc_out){
var_running = c()
mean_running = c()
for(i in 1:length(mc_out)){
var_running <- c(var_running, var(mc_out[1:i]))
mean_running <- c(var_running, mean(mc_out[1:i]))
}
return(list(var_running = var_running, mean_running = mean_running))
}
running = running_var_mean(mc_out)
plot(running$var_running)
plot(running$mean_running)
running_var_mean <- function(mc_out){
var_running = c()
mean_running = c()
for(i in 1:length(mc_out)){
var_running <- c(var_running, var(mc_out[1:i]))
mean_running <- c(var_running, mean(mc_out[1:i]))
}
return(list(var = var_running, mean = mean_running))
}
running = running_var_mean(mc_out)
plot(running$var)
plot(running$var, xlab = "niters", ylab = "running variance", main = "niter VS running variance")
plot(running$mean, xlab = "niters", ylab = "running mean", main = "niter VS running mean")
runtime[3]
runtime[[3]]
experi = list(model = mc_out, runtime = runtime[[3]])
saveRDS(experi, "mcmc_p4_iter10100.mc")
experi = list(model = mc_out, runtime = runtime)
saveRDS(experi, "mcmc_p4_iter10100.mc")
cumsum(1:10)/1:10
cumsum(1:10)/(1:10)
